<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
映射文件
namespace 指定接口的类全名
-->
<mapper namespace="com.itheima.case2.dao.UserMapper">

    <resultMap id="findAllUsersByPageResultMap" type="User" autoMapping="true">
        <!-- 1.配置t_user和实体类User的映射关系  -->
        <!--  配置主键：<id column="主键字段名" property="主键对应的成员变量名"/>      -->
        <id column="id" property="id"/>
        <!--  配置数据表除了主键字段名和实体类成员变量映射关系      -->
        <!--  <result column="字段名" property="成员变量名"/>-->
        <!-- 2.关联角色信息，一个用户对应多个角色，属于一对多，mybatis中 一对多使用标签collection     -->
        <!--
            2.1在User实体类中存储多个角色的集合：private Set<Role> roles = new HashSet<Role>(0);
            2.2 <collection property="User实体类存放角色的容器名" ofType="容器泛型" autoMapping="true"></collection>
        -->
        <collection property="roles" ofType="Role" autoMapping="true">
            <!-- 3.配置t_role和实体类Role的映射关系  -->
            <id column="rid" property="id"/>
        </collection>
    </resultMap>

    <!--
        查询语句
        id: 接口中方法的名字 List<User> findAllUsersByPage(QueryPageBean pb);
        resultType：返回的实体类的类型，类全名
        说明：
            1.select * from t_user limit #{offset},#{pageSize} 由于接口方法findAllUsersByPage的形参类型是QueryPageBean
            属于pojo实体类类型，即复杂类型，那么我们直接使用#{offset},#{pageSize}获取实参的时候，大括号中书写的内容看：
                QueryPageBean中实体类成员变量名： private Integer pageSize; private Integer offset
                或者getOffset()方法去掉get==>offset
           2.#{offset} 底层调用的是QueryPageBean实体类中的：
                public Integer getOffset(){
                    //分页公式：起始索引=(当前页码 - 1) * 每页条数;
                    //offset 就是起始索引
                    offset =(currentPage-1)*pageSize;
                    return offset;
                }
             那么就会执行该方法体，根据当前页码和每页条数计算起始索引
    -->
    <select id="findAllUsersByPage" resultMap="findAllUsersByPageResultMap">
        select u.*,r.id as rid,r.name,r.keyword,r.description
        from (select * from t_user limit #{offset},#{pageSize}) as u
                 inner join t_user_role as ur
                 inner join t_role as r
                            on u.id = ur.user_id and ur.role_id=r.id;
    </select>

    <!--
          //到中间表添加需要使用动态sql,因为这里roleIds是集合，需要遍历获取角色id值
        void addUserIDAndRoleID(@Param("uid") Integer id, @Param("rids") List<String> roleIds);
        说明：
            1.在mybatis映射文件中遍历数组或者集合使用标签
                <foreach collection="容器名" item="容器中每个元素名" separator="分隔符号">
                    (#{uid},#{rid})
                </foreach>
            假设：
                uid:2
                roleIds：数值：[2,3]
          实现效果：
            insert into t_user_role values (2,2),(2,3)
    -->
    <insert id="addUserIDAndRoleID">
        insert into t_user_role values
        <foreach collection="rids" item="rid" separator=",">
            (#{uid},#{rid})
        </foreach>
    </insert>
</mapper>